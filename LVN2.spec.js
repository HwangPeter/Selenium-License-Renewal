// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')


const id = "linda58421";
const pass = "Kibbles&bitz2";
// Introduction

// Information Privacy Act

// Application Questions
const renewingActive = true;
const servedArmedForces = false;
const firstRenewal = false;

// Name and Personal/Organization Details

// Contact Details
const changingAddress = false;
const address = "340 Roeder Ct";
const aptNum = "";
const addrCont = "";
const city = "San Jose";
const state = "California"; // This is a dropdown.
const zip = "95111-4057";
const county = "SANTA CLARA"; // This is a dropdown.
const country = "United States";
const phoneNum = "(408) 946-2740";
const phoneExt = "";
const email = "lindaihwang@yahoo.com";
const altPhone = "";

// Renewal Questions
const hasConvictedCrime = false;

// Additional Renewal Questions
const convictionDetails = "";
const disciplineDetails = "";

// Work Location
const addingWorkLocation = true; // Adding work location is optional.
const yearsWithEmployer = "";
const selfEmployed = true;
const workCounty = "";
const workZip = "";
const healthOccupation = "";
const workHours = "40+" // Options: "", "40+", "30-39", "20-29", "10-19", "1-9"
const isAcuteCareHospital = true;
const isHomeCare = true;
const isLongTermAcuteCare = true;
const isSkilledNursingFacility = true;
const isAccreditedEducationProgram = true;
const isManufacturer = true;
const isOutpatient = true;
const isClinic = true;
const otherWorkSetting = "";
// These must be numbers/percentages. e.g. "50"
const patientCarePercent = "";
const researchPercent = "";
const teachingPercent = "";
const administrationPercent = "";
const otherPercent = "";

// Healing Art Survey
const healingArtSurvey = true;
const pursuingCredentials = false;
const nameOfCert = "";
const yearOfCertCompletion = "2020";
const nameOfCertSchool = "school";
const addressOfCertSchool = "addr";

const isAfricanAmerican = false;
const isNativeAmerican = false;
const isWhite = false;
const isLatino = false;
const latinoOption = "Central American"; // Options are: "Central American", "Cuban", "Mexican", "Puerto Rican", "South American", "Other Hispanic"
const isAsian = false;
const asianOption = "Cambodian"; // Options are: "Cambodian", "Chinese", "Hmong", "Indian", "Indonesian", "Japanese", "Korean", "Laotian", "Malaysian", "Pakistani", "Singaporean", "Thai", "Vietnamese", "Other"
const isPacificIslander = false;
const pacificIslanderOption = "Fijian"; // Options are: "Fijian", "Filipino", "Guamanian", "Hawaiian", "Samoan", "Tongan", "Other Pacific Islander"
const isDoesNotIdentify = false;
const isDeclineToStateEthnicity = false;

const isFluentInOtherLanguages = false;
const language1 = "Afrikaans"; // Options are: "Afrikaans", "Albanian", "American Sign Language", "Amharic", "Apache", "Arabic", "Armenian", "Bantu", "Bengali", "Bisayan", "Bulgarian",
// "Burmese", "Cajun", "Cambodian", "Cantonese (Yue Chinese)", "Chamorro", "Cherokee", "Croatian", "Czech", "Dakota", "Danish", "Dutch",
// "Farsi", "Fijian", "Finnish", "Formosan (Amis)", "French", "French Creole", "German", "Greek", "Gujarati", "Haitian Creole", "Hebrew",
// "Hindi", "Hmong", "Hsiang (Xiang Chinese)", "Hungarian", "Ibo", "Ilocano/Iloko", "Indonesian", "Italian", "Japanese", "Kannada",
// "Keres", "Korean", "Kru", "Kurdish", "Lao", "Lettish", "Lithuanian", "Macedonian", "Malayalam", "Mandarin", "Mande", "Marathi",
// "Marshallese", "Mien (Lu Mien)", "Mon-Khmer", "Norwegian", "Navajo", "Nepali", "Panjabi (Punjabi)", "Pashto", "Patois", "Persian",
// "Polish", "Portuguese", "Rumanian", "Russian", "Samoan", "Sebuano", "Serbian", "Serbo-Croatian", "Sinhalese", "Slovak", "Spanish",
// "Swahili", "Swedish", "Syriac", "Tagalog", "Tamil", "Telugu", "Thai", "Tonga", "Turkish", "Ukrainian", "Urdu", "Vietnamese", "Yiddish",
// "Yoruba", "Other (not listed)", "Decline to state"
const language2 = "Greek";
const language3 = "Tagalog";
const language4 = "Cantonese (Yue Chinese)";

const retirementOption = "Within the next 2 years"; // Options are: "Within the next 2 years", "Within the next 5 years", "Within the next 10 years", "Not planning to retire within the next 10 years", "Already Retired", "Retired, work part time", "Plan to work part time", 

// File Attachments

// Application Summary

describe('LVN', function () {
  this.timeout(75000)
  beforeEach(async function () {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function () {
    // await driver.quit();
  })
  it('LVN', async function () {
    await driver.get("http://www.breeze.ca.gov")
    await driver.manage().window().setRect(1280, 777)

    // Splash page about coronavirus
    assert(await driver.findElement(By.css("p:nth-child(3)")).getText() == "Pursuant to the Governorâ€™s Executive Order N-39-20, during the State of Emergency, the Director of the California Department of Consumer Affairs may waive any statutory or regulatory renewal requirements pertaining to individuals licensed pursuant to Division 2 of the Business and Professions Code (the Code).")
    await driver.findElement(By.linkText("Continue to BreEZe")).click()

    // Homepage & logging in
    await driver.findElement(By.id("userid")).sendKeys(id)
    await driver.findElement(By.id("password")).sendKeys(pass)
    await driver.findElement(By.name("logon")).click()

    // Logged in homepage. Checking that license is up for renewal
    assert(await driver.findElement(By.id("lbl_renew")).getText() == "It is time to Renew!")
    await driver.findElement(By.id("renew00")).click()

    // Entered renewal form. Introduction
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Introduction")
    assert(await driver.findElement(By.css("p:nth-child(2)")).getText() == "Please thoroughly read the renewal information at: http://www.bvnpt.ca.gov/licensing/renewal_application_form.shtml before completing this application.")
    assert(await driver.findElement(By.css(".formDetails > .instructionFont:nth-child(1)")).getText() == "Notice to individuals (Civil Code Section 1798.17): All items of information requested in this application are mandatory. Failure to provide any of the requested information will result in the application being rejected as incomplete.")
    await driver.findElement(By.name("next")).click()

    // Information Privacy Act
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Information Privacy Act")
    assert(await driver.findElement(By.css("p:nth-child(2)")).getText() == "Collection and Use of Personal Information\nThe Board of Vocational Nursing and Psychiatric Technicians (BVNPT) of the Department of Consumer Affairs (DCA) collects the personal information requested on this application as authorized by Business and Professions Code Section 30 (General Provisions); Business and Professions Code Division 2, Chapter 6.5, (Vocational Nursing Practice Act); and California Code of Regulations Title 16, Division 25, Chapter 1 (Vocational Nurses). The BVNPT uses this information principally to identify and evaluate applicants for licensure, issue and renew licenses, and enforce licensing standards set by law and regulation.\n\nMandatory Submission\nSubmission of the requested information is mandatory. The BVNPT cannot consider your application for licensure or renewal unless you provide all of the requested information.\n\nAccess to Personal Information\nYou may review the records maintained by the BVNPT that contain your personal information, as permitted by the Information Practices Act. See below for contact information.\n\n\nPossible Disclosure of Personal Information\nThe BVNPT makes every effort to protect the personal information you provide. The information you provide, however, may be disclosed in the following circumstances:")
    await driver.findElement(By.name("agree")).click()

    // Application Questions
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Application Questions")
    assert(await driver.findElement(By.css(".instructionFont > p")).getText() == "If this is your first renewal, you are not required to complete 30 hours of Continuing Education (CE).\n\nTo renew with an \"Inactive\" status, you do not have to complete 30 hours of CE. However, you must submit your renewal fee. You are not permitted to work as a licensed vocational nurse with an inactive license.\n\nFingerprints are required as a condition of renewal for anyone licensed prior to January 1, 1998 or for whom a record of the fingerprint submission no longer exists. This requirement is waived if you are renewing as inactive, or if you are actively serving in the military outside the country.\n\nAll applicants living within California must provide a complete live scan request form IF they do not already have fingerprints on record with the Board. Applicants living outside of California and who do not meet the fingerprint requirements must submit 2 fingerprint cards (will be sent to you by the BVNPT upon submission of this application) and the required processing fee.")
    // Are you renewing Active?
    if (renewingActive) {
      // Yes, renewing active.
      const dropdown = await driver.findElement(By.name("question_0"))
      await dropdown.sendKeys('Yes');
    }
    else {
      // No, not renewing active.
      const dropdown = await driver.findElement(By.name("question_0"))
      await dropdown.sendKeys('No');
    }
    if (servedArmedForces) {
      const dropdown = await driver.findElement(By.name("question_2"))
      await dropdown.sendKeys('Yes');
    }
    else {
      const dropdown = await driver.findElement(By.name("question_2"))
      await dropdown.sendKeys('No');
    }
    await driver.findElement(By.name("next")).click()
    if (renewingActive) {
      // Form asks if this is first time renewing if renewing active.
      const dropdown = await driver.findElement(By.name("question_1"))
      if (firstRenewal) {
        await dropdown.sendKeys('Yes');
      }
      else {
        await dropdown.sendKeys('No');
      }
      await driver.findElement(By.name("next")).click()
    }

    // Name and Personal/Organization Details
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Name and Personal Details")
    assert(await driver.findElement(By.css(".instructionFont > p")).getText() == "Verify that your name is correct.\n\nIf you need to change your name, you will need to submit the Change of Name application prior to completing this application. To do so, use the \"Cancel\" button and return to the main menu, then select the Change of Name application from the dropdown menu.")
    await driver.findElement(By.name("next")).click()

    // Contact Details
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Address Detail Summary")
    assert(await driver.findElement(By.css(".instructionFont > p")).getText() == "Verify that your address is correct.\n\nIf you need to change your address, select the address that needs to be updated.\n\nPlease note: The Address of Record (AOR) is the mailing address used for all correspondence from the Board. Failure to update your AOR could result in undeliverable correspondence from the Board (i.e. renewal notices, deficiency letters, etc.).")
    assert(await driver.findElement(By.css("i")).getText() == "Please note: The Address of Record (AOR) is the mailing address used for all correspondence from the Board. Failure to update your AOR could result in undeliverable correspondence from the Board (i.e. renewal notices, deficiency letters, etc.).")
    if (changingAddress) {
      // Changes address
      // NOTE: Does not handle popup, wouldn't recommend using for now.
      await driver.findElement(By.linkText("Address of Record")).click()
      await driver.findElement(By.id("addressLine1")).sendKeys(address)
      await driver.findElement(By.id("addressLine2")).sendKeys(aptNum)
      await driver.findElement(By.id("addressLine3")).sendKeys(addrCont)
      await driver.findElement(By.id("addrCity")).sendKeys(city)
      let dropdown = await driver.findElement(By.id("stateCode"))
      await dropdown.sendKeys(state);
      await driver.findElement(By.id("addrZip")).sendKeys(zip)
      dropdown = await driver.findElement(By.id("county"))
      await dropdown.sendKeys(county);
      dropdown = await driver.findElement(By.id("countryCode"))
      await dropdown.sendKeys(country);
      await driver.findElement(By.id("phoneNbr")).sendKeys(phoneNum)
      await driver.findElement(By.id("phoneExtension")).sendKeys(phoneExt)
      await driver.findElement(By.id("emailAddr")).sendKeys(email)
      await driver.findElement(By.id("addrSpecific1")).sendKeys(altPhone)
      await driver.findElement(By.name("next")).click()
      await driver.findElement(By.name("next")).click()
    }
    await driver.findElement(By.name("next")).click()

    // Renewal Questions
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Renewal Questions - Information")
    assert(await driver.findElement(By.css("b:nth-child(1)")).getText() == "Continuing Education Information")
    assert(await driver.findElement(By.css("#contentBox > .instructionFont:nth-child(5)")).getText() == "Continuing Education Information\n\nTo renew with an \"Active\" status, you must complete 30 hours of continuing education (CE). The CE course(s) must be completed within 2 years prior to the date of renewal of your license.\n\nTo renew with an \"Inactive\" status, you do not have to complete 30 hours of CE. However you must submit your renewal fee. You are not permitted to work as a licensed vocational nurse with an inactive license.\n\nIf this is your first renewal, you are not required to complete 30 hours of CE.")
    assert(await driver.findElement(By.id("rsdDataValueLabel0")).getText() == "Are you renewing Active?")
    if (renewingActive) {
      await driver.findElement(By.id("rsdDataValue0_0")).click()
    }
    else {
      await driver.findElement(By.id("rsdDataValue0_1")).click()
    }

    assert(await driver.findElement(By.id("rsdDataValueLabel1")).getText() == "Is this your First Renewal?")
    if (firstRenewal) {
      await driver.findElement(By.id("rsdDataValue1_0")).click()
    }
    else {
      await driver.findElement(By.id("rsdDataValue1_1")).click()
    }

    assert(await driver.findElement(By.css(".label > u")).getText() == "Conviction Disclosure - Carefully read the following:")
    assert(await driver.findElement(By.css("ul:nth-child(5) > li:nth-child(1) > u")).getText() == "Infractions, misdemeanors and felonies,")
    assert(await driver.findElement(By.css("b:nth-child(6)")).getText() == "You do not have to report:")
    assert(await driver.findElement(By.css("ul:nth-child(7) > li:nth-child(1)")).getText() == "Any traffic violation for which the only sentence imposed was a fine of less than $1,000 and the violation did not involve alcohol, dangerous drugs or controlled substances.")
    assert(await driver.findElement(By.id("rsdDataValueLabel2")).getText() == "Since you last renewed your license, have you had any license disciplined by another government agency or been convicted of any crime in this or any other state, the United States, or other country?")
    if (hasConvictedCrime) {
      await driver.findElement(By.id("rsdDataValue2_0")).click()
    }
    else {
      await driver.findElement(By.id("rsdDataValue2_1")).click()
    }
    assert(await driver.findElement(By.css("#rowForRsdPost22881 .label")).getText() == "Failure to respond to this question will prevent your license from being renewed.")
    await driver.findElement(By.name("next")).click()

    // Additional Renewal Questions
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Additional Renewal Questions - Information")
    assert(await driver.findElement(By.css("#contentBox > .instructionFont:nth-child(5)")).getText() == "If you answered \"Yes\" to the Conviction and/or Discipline question on the Renewal Questions tab, you must provide a detailed statement, in your own words, explaining the violation and/or incident (attach any additional explanations on the File Attachments tab of this application).\n\nIf you answered \"No\" to the Conviction and/or Discipline question on the Renewal Questions tab, you must respond with \"No Conviction\" and/or \"No Discipline\" in the appropriate boxes.")
    assert(await driver.findElement(By.id("rsdDataValueLabel0")).getText() == "Provide the details of the conviction:")
    await driver.findElement(By.id("rsdDataValue0")).sendKeys(convictionDetails)
    assert(await driver.findElement(By.id("rsdDataValueLabel1")).getText() == "Provide the details of the discipline:")
    await driver.findElement(By.id("rsdDataValue1")).sendKeys(disciplineDetails)
    await driver.findElement(By.name("next")).click()

    // Work Location
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Work Location - Information")
    assert(await driver.findElement(By.css("#contentBox > .instructionFont:nth-child(5)")).getText() == "Please consider completing the following optional survey questions relating to your work in the healing arts profession. Completion of the survey helps determine health professionals\' shortages and improves access to patient care. If you do not wish to complete this component of the survey, select \'Next\' at the bottom of the screen to proceed forward with your application.\n\nPlease select \'Add\' below to add information relevant to one or more of your current work locations. You will be allowed to enter more than one work location.")
    if (addingWorkLocation) {
      await driver.findElement(By.name("add")).click()
      assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Work Location - Add")
      assert(await driver.findElement(By.css("#contentBox > .instructionFont:nth-child(5)")).getText() == "Please consider completing the following optional survey questions relating to your work in the healing arts profession. Completion of the survey helps determine health professionals\' shortages and improves access to patient care. If you do not wish to complete this component of the survey, select \'Next\' at the bottom of the screen to proceed forward with your application.\n\nPlease select \'Add\' below to add information relevant to one or more of your current work locations. You will be allowed to enter more than one work location.")

      assert(await driver.findElement(By.id("rsdDataValueLabel0")).getText() == "Years with Employer:")
      await driver.findElement(By.id("rsdDataValue0")).sendKeys(yearsWithEmployer)

      assert(await driver.findElement(By.id("rsdDataValueLabel1")).getText() == "Self Employed:")
      if (selfEmployed) {
        await driver.findElement(By.id("rsdDataValue1Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue1No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel2")).getText() == "County:")
      await driver.findElement(By.id("rsdDataValue2")).sendKeys(workCounty)

      assert(await driver.findElement(By.id("rsdDataValueLabel3")).getText() == "Zip Code:")
      await driver.findElement(By.id("rsdDataValue3")).sendKeys(workZip)

      assert(await driver.findElement(By.id("rsdDataValueLabel4")).getText() == "Health Occupation:")
      await driver.findElement(By.id("rsdDataValue4")).sendKeys(healthOccupation)

      assert(await driver.findElement(By.id("rsdDataValueLabel5")).getText() == "Work Hours:")
      {
        const dropdown = await driver.findElement(By.id("rsdDataValue5"))
        await dropdown.sendKeys(workHours);
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel6")).getText() == "Acute Care Hospital:")
      if (isAcuteCareHospital) {
        await driver.findElement(By.id("rsdDataValue6Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue6No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel7")).getText() == "Home Care/Durable Medical Equipment:")
      if (isHomeCare) {
        await driver.findElement(By.id("rsdDataValue7Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue7No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel8")).getText() == "Long-Term Acute Care:")
      if (isLongTermAcuteCare) {
        await driver.findElement(By.id("rsdDataValue8Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue8No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel9")).getText() == "Skilled Nursing Facility:")
      if (isSkilledNursingFacility) {
        await driver.findElement(By.id("rsdDataValue9Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue9No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel10")).getText() == "Accredited Education Program:")
      if (isAccreditedEducationProgram) {
        await driver.findElement(By.id("rsdDataValue10Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue10No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel11")).getText() == "Manufacturer/Distributer:")
      if (isManufacturer) {
        await driver.findElement(By.id("rsdDataValue11Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue11No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel12")).getText() == "Outpatient:")
      if (isOutpatient) {
        await driver.findElement(By.id("rsdDataValue12Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue12No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel13")).getText() == "Clinic/Community Health Center:")
      if (isClinic) {
        await driver.findElement(By.id("rsdDataValue13Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue13No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel14")).getText() == "Other Work Setting:")
      await driver.findElement(By.id("rsdDataValue14")).sendKeys(otherWorkSetting)

      assert(await driver.findElement(By.id("rsdDataValueLabel15")).getText() == "% Patient Care:")
      await driver.findElement(By.id("rsdDataValue15")).sendKeys(patientCarePercent)

      assert(await driver.findElement(By.id("rsdDataValueLabel16")).getText() == "% Research:")
      await driver.findElement(By.id("rsdDataValue16")).sendKeys(researchPercent)

      assert(await driver.findElement(By.id("rsdDataValueLabel17")).getText() == "% Teaching:")
      await driver.findElement(By.id("rsdDataValue17")).sendKeys(teachingPercent)

      assert(await driver.findElement(By.id("rsdDataValueLabel18")).getText() == "% Administration:")
      await driver.findElement(By.id("rsdDataValue18")).sendKeys(administrationPercent)

      assert(await driver.findElement(By.id("rsdDataValueLabel19")).getText() == "% Other:")
      await driver.findElement(By.id("rsdDataValue19")).sendKeys(otherPercent)

      await driver.findElement(By.name("done")).click()

      // Checking if answers were entered correctly.
      assert(await driver.findElement(By.css(".itemCell:nth-child(1) > .item")).getText() == yearsWithEmployer)
      assert(await driver.findElement(By.css(".itemCell:nth-child(2) > .item")).getText() == selfEmployed ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(3) > .item")).getText() == workCounty)
      assert(await driver.findElement(By.css(".itemCell:nth-child(4) > .item")).getText() == workZip)
      assert(await driver.findElement(By.css(".itemCell:nth-child(5) > .item")).getText() == healthOccupation)
      assert(await driver.findElement(By.css(".itemCell:nth-child(6) > .item")).getText() == workHours)
      assert(await driver.findElement(By.css(".itemCell:nth-child(7) > .item")).getText() == isAcuteCareHospital ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(8) > .item")).getText() == isHomeCare ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(9) > .item")).getText() == isLongTermAcuteCare ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(10) > .item")).getText() == isSkilledNursingFacility ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(11) > .item")).getText() == isAccreditedEducationProgram ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(12) > .item")).getText() == isManufacturer ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(13) > .item")).getText() == isOutpatient ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(14) > .item")).getText() == isClinic ? ("Yes") : ("No"))
      assert(await driver.findElement(By.css(".itemCell:nth-child(15) > .item")).getText() == otherWorkSetting)
      assert(await driver.findElement(By.css(".itemCell:nth-child(16) > .item")).getText() == patientCarePercent)
      assert(await driver.findElement(By.css(".itemCell:nth-child(17) > .item")).getText() == researchPercent)
      assert(await driver.findElement(By.css(".itemCell:nth-child(18) > .item")).getText() == teachingPercent)
      assert(await driver.findElement(By.css(".itemCell:nth-child(19) > .item")).getText() == administrationPercent)
      assert(await driver.findElement(By.css(".itemCell:nth-child(20) > .item")).getText() == otherPercent)
      return;
    }

    await driver.findElement(By.name("next")).click()

    // Healing Art Survey
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Healing Art Survey - Information")
    assert(await driver.findElement(By.css("#contentBox > .instructionFont:nth-child(5)")).getText() == "Please consider completing the following optional survey questions relating to your healing arts profession. Completion of the survey helps determine health professionals\' shortages and improves access to patient care. If you do not wish to complete this component of the survey, select \'Next\' at the bottom of the screen to proceed forward with your application.")
    if (healingArtSurvey) {
      assert(await driver.findElement(By.id("rsdDataValueLabel0")).getText() == "Are you presently pursuing credentials or certifications in addition to your previously obtained qualifying degree?")
      if (pursuingCredentials) {
        await driver.findElement(By.id("rsdDataValue0_0")).click()

        assert(await driver.findElement(By.id("rsdDataValueLabel1")).getText() == "If you answered \'Yes\' to the previous question, please enter the name of the credential/certification:")
        await driver.findElement(By.id("rsdDataValue1")).sendKeys(nameOfCert)

        assert(await driver.findElement(By.id("rsdDataValueLabel2")).getText() == "If you are pursuing additional credentials or certifications, what is the expected year of completion (e.g. 2018)?")
        await driver.findElement(By.id("rsdDataValue2")).sendKeys(yearOfCertCompletion);

        assert(await driver.findElement(By.id("rsdDataValueLabel3")).getText() == "If applicable, please enter the name of the school at which you are pursuing your additional credential/certification:")
        await driver.findElement(By.id("rsdDataValue3")).sendKeys(nameOfCertSchool)

        assert(await driver.findElement(By.id("rsdDataValueLabel4")).getText() == "If applicable, please enter the address of the school at which you are pursuing your additional credential/certification:")
        await driver.findElement(By.id("rsdDataValue4")).sendKeys(addressOfCertSchool)
      }
      else {
        await driver.findElement(By.id("rsdDataValue0_1")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel5")).getText() == "If you identify your cultural/ethnic background as African American, please select \'Yes.\'")
      if (isAfricanAmerican) {
        await driver.findElement(By.id("rsdDataValue5Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue5No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel6")).getText() == "If you identify your cultural/ethnic background as American Indian/Native American/Alaskan Native, please select \'Yes.\'")
      if (isNativeAmerican) {
        await driver.findElement(By.id("rsdDataValue6Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue6No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel7")).getText() == "If you identify your cultural/ethnic background as Caucasian/White European/Middle Eastern, please select \'Yes.\'")
      if (isWhite) {
        await driver.findElement(By.id("rsdDataValue7Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue7No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel8")).getText() == "If you identify your cultural/ethnic background as Latino/Hispanic, please select \'Yes.\'")
      if (isLatino) {
        await driver.findElement(By.id("rsdDataValue8Yes")).click()
        assert(await driver.findElement(By.id("rsdDataValueLabel9")).getText() == "If you identify your cultural/ethnic background as Latino/Hispanic, please select the appropriate value from the dropdown options.")
        {
          const dropdown = await driver.findElement(By.id("rsdDataValue9"))
          await dropdown.sendKeys(latinoOption)
        }
      }
      else {
        await driver.findElement(By.id("rsdDataValue8No")).click()
      }


      assert(await driver.findElement(By.id("rsdDataValueLabel10")).getText() == "If you identify your cultural/ethnic background as Asian, please select \'Yes.\'")
      if (isAsian) {
        await driver.findElement(By.id("rsdDataValue10Yes")).click()
        assert(await driver.findElement(By.id("rsdDataValueLabel11")).getText() == "If you identify your cultural/ethnic background as Asian, please select the appropriate value from the dropdown options.")
        {
          const dropdown = await driver.findElement(By.id("rsdDataValue11"))
          await dropdown.sendKeys(asianOption)
        }
      }
      else {
        await driver.findElement(By.id("rsdDataValue10No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel12")).getText() == "If you identify your cultural/ethnic background as Native Hawaiian/Pacific Islander, please select \'Yes.\'")
      if (isPacificIslander) {
        await driver.findElement(By.id("rsdDataValue12Yes")).click()
        assert(await driver.findElement(By.id("rsdDataValueLabel13")).getText() == "If you identify your cultural/ethnic background as Native Hawaiian/Pacific Islander, please select the appropriate value from the dropdown options.")
        {
          const dropdown = await driver.findElement(By.id("rsdDataValue13"))
          await dropdown.sendKeys(pacificIslanderOption)
        }
      }
      else {
        await driver.findElement(By.id("rsdDataValue12No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel14")).getText() == "If you do not identify with any of the cultural/ethnic backgrounds listed in this survey, please select \'Yes.\'")
      if (isDoesNotIdentify) {
        await driver.findElement(By.id("rsdDataValue14Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue14No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel15")).getText() == "If you decline to state your cultural/ethnic background, please select \'Yes.\'")
      if (isDeclineToStateEthnicity) {
        await driver.findElement(By.id("rsdDataValue15Yes")).click()
      }
      else {
        await driver.findElement(By.id("rsdDataValue15No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel16")).getText() == "Are you fluent in languages other than English? If yes, please identify these languages in the drop downs below.")
      if (isFluentInOtherLanguages) {
        await driver.findElement(By.id("rsdDataValue16Yes")).click()

        let dropdown = await driver.findElement(By.id("rsdDataValue17"))
        await dropdown.sendKeys(language1)
        dropdown = await driver.findElement(By.id("rsdDataValue18"))
        await dropdown.sendKeys(language2)
        dropdown = await driver.findElement(By.id("rsdDataValue19"))
        await dropdown.sendKeys(language3)
        dropdown = await driver.findElement(By.id("rsdDataValue20"))
        await dropdown.sendKeys(language4)
      }

      else {
        await driver.findElement(By.id("rsdDataValue16No")).click()
      }

      assert(await driver.findElement(By.id("rsdDataValueLabel21")).getText() == "Please select the value from the dropdown that best represents when you plan to retire.")
      {
        const dropdown = await driver.findElement(By.id("rsdDataValue21"))
        await dropdown.sendKeys(retirementOption);
      }
    }
    return;
    await driver.findElement(By.name("next")).click()
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Attachments")
    assert(await driver.findElement(By.css(".instructionFont > p:nth-child(1)")).getText() == "If any professional license has been suspended, revoked, placed on probation, or disciplined by another state agency, please submit a copy of the disciplinary order for each action.")
    assert(await driver.findElement(By.css("p:nth-child(2)")).getText() == "If you have been convicted of a crime please submit the following information for each action:")
    assert(await driver.findElement(By.css("ol > li:nth-child(1)")).getText() == "Certified court documents (obtained directly from the court);")
    assert(await driver.findElement(By.css("ol > li:nth-child(2)")).getText() == "Certified law enforcement report (obtained directly from the police, sheriff, or CHP);")
    assert(await driver.findElement(By.css("ol > li:nth-child(3)")).getText() == "A signed and dated detailed statement, in your own words, explaining each offense.")
    assert(await driver.findElement(By.css(".instructionFont > p:nth-child(4)")).getText() == "Certified documents are obtained directly from the court/law enforcement agency with an original stamp of certification.")
    await driver.findElement(By.id("file")).sendKeys("C:\\fakepath\\Certificate.jpg")
    await driver.findElement(By.id("notes")).sendKeys("attachmentNotes")
    await driver.findElement(By.name("next")).click()
    assert(await driver.findElement(By.css(".h2")).getText() == "Vocational Nurse Renewal Application - Application Summary")
    assert(await driver.findElement(By.css("tbody > .listingHeader > th")).getText() == "Vocational Nurse Renewal Application Summary")
    assert(await driver.findElement(By.css("tbody:nth-child(2) > tr:nth-child(1) > .labelCell:nth-child(2) > label")).getText() == "License Type")
    assert(await driver.findElement(By.css("tr:nth-child(1) > td:nth-child(3) > .dataView")).getText() == "Vocational Nurse")
    assert(await driver.findElement(By.css("tbody:nth-child(2) > tr:nth-child(2) > .labelCell:nth-child(2) > label")).getText() == "File Number")
    assert(await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(3) > .dataView")).getText() == "65367")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(3) tr:nth-child(3) label")).getText() == "License Number")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(3) tr:nth-child(3) .dataView")).getText() == "238417")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(3) tr:nth-child(4) label")).getText() == "Application Number:")
    assert(await driver.findElement(By.css("tr:nth-child(4) > td:nth-child(3) > .dataView")).getText() == "7149415")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(3) tr:nth-child(5) label")).getText() == "Application Date")
    assert(await driver.findElement(By.css("tr:nth-child(5) > td:nth-child(3) > .dataView")).getText() == "05/24/2020")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(4) th:nth-child(1)")).getText() == "Application Questions")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(4) tr:nth-child(1) label")).getText() == "Are you renewing Active?")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(4) tr:nth-child(1) > .dataView")).getText() == "No")
    assert(await driver.findElement(By.css("tbody:nth-child(3) > tr:nth-child(2) > .labelCell:nth-child(1) > label")).getText() == "Have you served, or are you currently serving, in the U.S. Armed Forces?")
    assert(await driver.findElement(By.css("tr:nth-child(2) > .dataView:nth-child(2)")).getText() == "Yes")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(5) th:nth-child(1)")).getText() == "Personal Details")
    assert(await driver.findElement(By.css("tbody:nth-child(3) > tr:nth-child(1) > .labelCell:nth-child(2) > label")).getText() == "First Name")
    assert(await driver.findElement(By.css("tr:nth-child(1) > .dataView:nth-child(3)")).getText() == "LINDA")
    assert(await driver.findElement(By.css("tbody:nth-child(3) > tr:nth-child(2) > .labelCell:nth-child(2) > label")).getText() == "Middle Name")
    assert(await driver.findElement(By.css("tbody:nth-child(3) > tr:nth-child(3) label")).getText() == "Last Name")
    assert(await driver.findElement(By.css("tr:nth-child(3) > .dataView")).getText() == "HWANG")
    assert(await driver.findElement(By.css(".itemRow:nth-child(2) b")).getText() == "License Specific Addresses")
    assert(await driver.findElement(By.css(".itemRowAlt:nth-child(3) label")).getText() == "Name")
    assert(await driver.findElement(By.css(".itemRowAlt > td > .dataView")).getText() == "HWANG, LINDA")
    assert(await driver.findElement(By.css(".itemRowAlt:nth-child(4) label")).getText() == "Address")
    assert(await driver.findElement(By.css(".itemRowAlt:nth-child(4) tr:nth-child(1) .dataView")).getText() == "340 Roeder Ct")
    assert(await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(1) > .dataView")).getText() == "SAN JOSE , CA")
    assert(await driver.findElement(By.css("tr:nth-child(3) > td:nth-child(1) > .dataView")).getText() == "SANTA CLARA")
    assert(await driver.findElement(By.css("tr:nth-child(4) > td:nth-child(1) > .dataView")).getText() == "95111-4057")
    assert(await driver.findElement(By.css("tr:nth-child(5) > td:nth-child(1) > .dataView")).getText() == "US")
    assert(await driver.findElement(By.css(".itemRowAlt:nth-child(5) label")).getText() == "Primary Phone Number")
    assert(await driver.findElement(By.css(".itemRowAlt:nth-child(5) .dataView")).getText() == "(408) 946-2740")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(7) th:nth-child(1)")).getText() == "License Attributes Selected")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(7) label")).getText() == "Secondary Status")
    assert(await driver.findElement(By.css(".tableWithLine:nth-child(7) .dataView")).getText() == "Military")
    assert(await driver.findElement(By.css("table:nth-child(8) b")).getText() == "Renewal Questions")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(1) label")).getText() == "Are you renewing Active?")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(1) .item")).getText() == "No")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(2) label")).getText() == "Is this your First Renewal?")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(2) .item")).getText() == "No")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(3) > .labelCell")).getText() == "Since you last renewed your license, have you had any license disciplined by another government agency or been convicted of any crime in this or any other state, the United States, or other country?")
    assert(await driver.findElement(By.css("table:nth-child(9) .itemRow:nth-child(3) .item")).getText() == "No")
    assert(await driver.findElement(By.css("table:nth-child(10) b")).getText() == "Additional Renewal Questions")
    assert(await driver.findElement(By.css("table:nth-child(11) .itemRow:nth-child(1) label")).getText() == "Provide the details of the conviction:")
    assert(await driver.findElement(By.css("table:nth-child(11) .itemRow:nth-child(1) .item")).getText() == "convictionDetails")
    assert(await driver.findElement(By.css("table:nth-child(11) .itemRow:nth-child(2) label")).getText() == "Provide the details of the discipline:")
    assert(await driver.findElement(By.css("table:nth-child(11) .itemRow:nth-child(2) .item")).getText() == "disciplineDetails")
    assert(await driver.findElement(By.css("table:nth-child(12) b")).getText() == "Work Location")
    assert(await driver.findElement(By.css("thead:nth-child(1) th:nth-child(1)")).getText() == "Years with Employer")
    assert(await driver.findElement(By.css(".itemRow > .itemCell:nth-child(1) > .item")).getText() == "1")
    assert(await driver.findElement(By.css("thead:nth-child(1) th:nth-child(2)")).getText() == "Self Employed")
    assert(await driver.findElement(By.css("table:nth-child(1) .itemCell:nth-child(2) > .item")).getText() == "No")
    assert(await driver.findElement(By.css(".listingHeader > th:nth-child(3)")).getText() == "County")
    assert(await driver.findElement(By.css(".itemCell:nth-child(3) > .item")).getText() == "county")
    assert(await driver.findElement(By.css("th:nth-child(4)")).getText() == "Zip Code")
    assert(await driver.findElement(By.css(".itemCell:nth-child(4) > .item")).getText() == "zip")
    assert(await driver.findElement(By.css("th:nth-child(5)")).getText() == "Health Occupation")
    assert(await driver.findElement(By.css(".itemCell:nth-child(5) > .item")).getText() == "healthOccupation")
    assert(await driver.findElement(By.css("th:nth-child(6)")).getText() == "Work Hours")
    assert(await driver.findElement(By.css(".itemCell:nth-child(6) > .item")).getText() == "40+")
    assert(await driver.findElement(By.css("th:nth-child(7)")).getText() == "Acute Care Hospital")
    assert(await driver.findElement(By.css(".itemCell:nth-child(7) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(8)")).getText() == "Home Care/Durable Medical Equipment")
    assert(await driver.findElement(By.css(".itemCell:nth-child(8) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(9)")).getText() == "Long-Term Acute Care")
    assert(await driver.findElement(By.css(".itemCell:nth-child(9) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(10)")).getText() == "Skilled Nursing Facility")
    assert(await driver.findElement(By.css(".itemCell:nth-child(10) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(11)")).getText() == "Accredited Education Program")
    assert(await driver.findElement(By.css(".itemCell:nth-child(11) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(12)")).getText() == "Manufacturer/Distributer")
    assert(await driver.findElement(By.css(".itemCell:nth-child(12) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(13)")).getText() == "Outpatient")
    assert(await driver.findElement(By.css(".itemCell:nth-child(13) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(14)")).getText() == "Clinic/Community Health Center")
    assert(await driver.findElement(By.css(".itemCell:nth-child(14) > .item")).getText() == "No")
    assert(await driver.findElement(By.css("th:nth-child(15)")).getText() == "Other Work Setting")
    assert(await driver.findElement(By.css(".itemCell:nth-child(15) > .item")).getText() == "otherWorkSetting")
    assert(await driver.findElement(By.css("th:nth-child(16)")).getText() == "% Patient Care")
    assert(await driver.findElement(By.css(".itemCell:nth-child(16) > .item")).getText() == "1")
    assert(await driver.findElement(By.css("th:nth-child(17)")).getText() == "% Research")
    assert(await driver.findElement(By.css(".itemCell:nth-child(17) > .item")).getText() == "2")
    assert(await driver.findElement(By.css("th:nth-child(18)")).getText() == "% Teaching")
    assert(await driver.findElement(By.css(".itemCell:nth-child(18) > .item")).getText() == "3")
    assert(await driver.findElement(By.css("th:nth-child(19)")).getText() == "% Administration")
    assert(await driver.findElement(By.css(".itemCell:nth-child(19) > .item")).getText() == "4")
    assert(await driver.findElement(By.css("th:nth-child(20)")).getText() == "% Other")
    assert(await driver.findElement(By.css(".itemCell:nth-child(20) > .item")).getText() == "5")
    assert(await driver.findElement(By.css(".itemRowAlt b")).getText() == "Healing Art Survey")
  })
})









// Full list of states:
// {
//   await dropdown.findElement(By.xpath("/option[. = 'AA']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'AE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'AP']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Alabama']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Alaska']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Alberta']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'American Samoa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Arizona']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Arkansas']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'British Columbia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'California']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Colorado']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Connecticut']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Delaware']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'District of Columbia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'FSofMcrnsa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Florida']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Georgia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guam']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Hawaii']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Idaho']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Illinois']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Indiana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Iowa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kansas']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kentucky']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Louisiana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Maine']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Manitoba']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Maryland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Massachusetts']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Michigan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Minnesota']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mississippi']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Missouri']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Montana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nebraska']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nevada']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Brunswick']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Hampshire']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Jersey']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Mexico']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New York']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Newfoundland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'North Carolina']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'North Dakota']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Northern Marianas']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nova Scotia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ohio']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Oklahoma']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ontario']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Oregon']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Out Of Country State']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Palau']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Pennsylvania']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Prince Edward Island']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Puerto Rico']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Quebec']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Rhode Island']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Saskatchewan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'South Carolina']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'South Dakota']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tennessee']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Texas']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Utah']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Vermont']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Virgin Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Virginia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Washington']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'West Virginia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Wisconsin']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("stateCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Wyoming']")).click()
// }

// List of counties
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'ALBANY']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'BIG HORN']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'CAMPBELL']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'CARBON']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'CONVERSE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'CROOK']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'FREMONT']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'GOSHEN']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'HOT SPRINGS']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'JOHNSON']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'LARAMIE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'LINCOLN']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'NATRONA']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'NIOBRARA']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'PARK']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'PLATTE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'SHERIDAN']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'SUBLETTE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'SWEETWATER']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'TETON']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'UINTA']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'WASHAKIE']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("county"))
//   await dropdown.findElement(By.xpath("/option[. = 'WESTON']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Afghanistan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Albania']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Algeria']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'American Samoa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Andorra']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Angola']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Anguilla']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Antarctica']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Antigua & Barbuda']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Argentina']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Armenia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Aruba']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Australia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Austria']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Azerbaijan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bahamas']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bahrain']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bangladesh']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Barbados']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Belarus']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Belgium']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Belize']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Benin']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bermuda']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bhutan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bolivia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bosnia & Herzegovina']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Botswana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bouvet Island']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Brazil']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'British Indian Ocean']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Brunei Darussalam']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Bulgaria']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Burkina Faso']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Burma']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Burundi']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cambodia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cameroon']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Canada']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cape Verde']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cayman Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Central African Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Chad']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Chile']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'China']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Christmas Island']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cocos/Keeling Isl']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Colombia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Comoros']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Congo']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Congo, Dem Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cook Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Costa Rica']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cote Divoire']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Croatia/Hrvatska']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cuba']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Cyprus']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Czech Republic']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Denmark']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Djibouti']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Dominica']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Dominican Republic']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'East Timor']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ecuador']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Egypt']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'El Salvador']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Equatorial Guinea']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Eritrea']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Estonia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ethiopia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Falkland Isl/Malvina']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Faroe Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Fiji']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Finland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'France']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'France, Metropolitan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'French Guiana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'French Polynesia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'French S Territories']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Gabon']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Gambia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Georgia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Germany']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ghana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Gibraltar']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Greece']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Greenland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Grenada']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guadeloupe']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guam']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guatemala']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guinea']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guinea-Bissau']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Guyana']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Haiti']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Heard & McDonald Isl']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Holy,Vatican City St']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Honduras']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Hong Kong']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Hungary']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Iceland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'India']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Indonesia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Iran, Islamic Rep of']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Iraq']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ireland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Israel']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Italy']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Jamaica']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Japan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Jordan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kazakhstan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kenya']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kiribati']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Korea, Peoples Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Korea, Rep of']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kuwait']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Kyrgyzstan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Lao Peoples Dem Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Latvia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Lebanon']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Lesotho']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Liberia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Libyan Jamahiriya']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Liechtenstein']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Lithuania']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Luxembourg']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Macau']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Macedonia,Yugoslav']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Madagascar']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Malawi']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Malaysia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Maldives']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mali']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Malta']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Marshall Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Martinique']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mauritania']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mauritius']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mayotte']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mexico']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Micronesia, Fed St']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Moldova, Rep of']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Monaco']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mongolia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Montserrat']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Morocco']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Mozambique']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Myanmar']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Namibia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nauru']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nepal']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Netherlands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Netherlands Antilles']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Caledonia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'New Zealand']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nicaragua']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Niger']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Nigeria']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Niue']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Norkold Island']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'North Korea']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Northern Mariana Isl']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Norway']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Oman']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Pakistan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Palau']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Panama']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Papua New Guinea']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Paraguay']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Peru']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Philippines']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Pitcairn']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Poland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Portugal']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Puerto Rico']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Qatar']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Reunion']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Romania']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Russian Federation']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Rwanda']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'S Georgia Sandwich']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Saint Helena']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Saint Lucia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Samoa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'San Marino']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Sao Tome & Principe']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Saudi Arabia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Senegal']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Serbia & Montenegro']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Seychelles']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Sierra Leone']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Singapore']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Slovakia/Slovak Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Slovenia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Solomon Islands']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Somalia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'South Africa']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Spain']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Sri Lanka']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'St Kitts & Nevis']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'St Pierre & Miquelon']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'St Vincent & Grenada']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Sudan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Suriname']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Svalbard Jan Mayen']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Swaziland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Sweden']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Switzerland']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Syrian Arab Republic']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Taiwan, Prov China']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tajikistan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tanzania United Rep']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Thailand']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Togo']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tokelau']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tonga']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Trinidad & Tobago']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tunisia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Turkey']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Turkmenistan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Turks & Caicos Isl']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Tuvalu']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'US Minor Outlying Is']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Uganda']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Ukraine']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'United Arab Emirates']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'United Kingdom']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'United States']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Uruguay']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Uzbekistan']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Vanuatu']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Venezuela']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'VietNam']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Virgin Isl -British']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Virgin Isl -US']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Wallis & Futuna Isl']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'West Bank/Gaza Strip']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Western Sahara']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Yemen']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Yugoslavia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Zaire']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Zambia']")).click()
// }
// {
//   const dropdown = await driver.findElement(By.id("countryCode"))
//   await dropdown.findElement(By.xpath("/option[. = 'Zimbabwe']")).click()
// }
// await driver.findElement(By.id("phoneNbr")).sendKeys("primaryPhoneNum")
// await driver.findElement(By.id("phoneExtension")).sendKeys("ext")
// await driver.findElement(By.id("emailAddr")).sendKeys("email")
// await driver.findElement(By.id("addrSpecific1")).sendKeys("altPhone")
// Form requires entering next twice if altering address.
// await driver.findElement(By.name("next")).click()
// await driver.findElement(By.name("next")).click()